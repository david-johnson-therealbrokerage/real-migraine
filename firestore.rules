rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user owns the document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Users collection - users can only access their own user document
    match /users/{userId} {
      allow read, write: if isOwner(userId);
    }
    
    // Migraines collection - users can only access their own migraine entries
    match /migraines/{migraineId} {
      // Allow read if the user owns the document
      allow read: if isAuthenticated() && 
        request.auth.uid == resource.data.userId;
      
      // Allow create if user is authenticated and setting their own userId
      allow create: if isAuthenticated() && 
        request.auth.uid == request.resource.data.userId &&
        request.resource.data.keys().hasAll(['userId', 'startDateTime']) &&
        request.resource.data.createdAt == request.time &&
        request.resource.data.updatedAt == request.time;
      
      // Allow update if user owns the document and maintains userId
      allow update: if isAuthenticated() && 
        request.auth.uid == resource.data.userId &&
        request.auth.uid == request.resource.data.userId &&
        request.resource.data.updatedAt == request.time;
      
      // Allow delete if user owns the document
      allow delete: if isAuthenticated() && 
        request.auth.uid == resource.data.userId;
    }
    
    // Deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}